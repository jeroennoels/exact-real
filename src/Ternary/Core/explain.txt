Let x and y be real numbers between -1 and 1.  Let (a0,a1,a2..) and
(b0,b1,b2..) be redundant ternary digit expansions of x and y, so

x = 1/3 a0 + 1/9 a1 + ..
y = 1/3 b0 + 1/9 b1 + ..

The digits are in the usual [-2..2] range. Schematically we write:

x = O # a0 | a1 | a2 | ..
y = O # b0 | b1 | b2 | ..

The # separator is the equivalent of the decimal point.  The benefit
of using # and | is that they allow for a clear vertical alignment in
such schematic representations.

We want to find a recursive algorithm to stream the digits of the
product x*y.  So we write x*y in terms of rec = x1*y1 where

x1 = O # a1 | a2 | .. = 1/3 a1 + 1/9 a2 + ..
y1 = O # b1 | b2 | .. = 1/3 b1 + 1/9 b2 + ..

x = 1/3 a0 + 1/3 x1
y = 1/3 b0 + 1/3 y1

x*y = 1/9 a0 b0 + 1/9 a0 y1 + 1/9 b0 x1 + 1/9 rec
    = 1/9 a0 b0 + 1/27 (a0 b1 + 1/3 a0 b2 + ..)
                + 1/27 (b0 a1 + 1/3 b0 a2 + ..)
                + 1/27 (r0    + 1/3 r1    + ..)

where rec = x1*y1 = 1/3 r0 + 1/9 r1 + .. = O # r0 | r1 | ..

Digit products, such as a0 b0 in the above expression, have a value in
the set {-4,-2,-1,0,1,2,4}.  We can represent the above schematically,
if we temporarily allow redundant digits between -4 and 4.

  O # O | a0 b0 | O     | O     |
  O # O | O     | a0 b1 | a0 b2 | ..
  O # O | O     | b0 a1 | b0 a2 | ..
  O # O | O     | r0    | r1    | ..

We are looking at a sum of four expansions that must be reduced to
one, with digits in the usual range [-2..2].  Let's start with the
cross terms in this product.  These are scalar multiplications, which
are trivial in case the multiplier is 0 or 1.  Negation is also easy,
so multiplication by 2 is the only non-trivial case.  This can be
achieved with a single streaming addition.  Thus the above can be
rewritten as

  O # O | a0 b0 | O  | O  |
  O # O | u0    | u1 | u2 | ..
  O # O | v0    | v1 | v2 | ..
  O # O | O     | r0 | r1 | ..

where (u0,u1,u2..) and (v0,v1,v2..) result from these scalar products.
These two can in turn be added to produce a stream (w0,w1,w2..)

  O # O  | a0 b0 | O  | O  |
  O # w0 | w1    | w2 | w3 | ..
  O # O  | O     | r0 | r1 | ..

Now observe that a0 b0 can always be written as

    a0 b0 = 3 car + rem

with both car and rem in {-1,0,1}.  So the above schema becomes

  O # w0  | w1  | w2 | w3 | ..
  O # car | rem | r0 | r1 | ..

One more addition gives us a stream of this form

 z' # z0 | z1 | z2 | z3 | ..

This represents the product x*y of two real numbers between -1 and 1,
which is itself between -1 and 1.  Therefor it is possible to rewrite
this stream in such a way that the leading digit is zero.  But this
requires additional computation, which is not necessarily useful: our
number representations are massively redundant anyway, so there is not
much of a reason to "normalize" the leading digits away.

However, we must be able to feed the above result recursively into the
rec input channel.  Previously we wrote

    rec = O # r0 | r1 | r2 | ..

but by now it is evident that we need to allow a more redundant form
for this, one that does not assume the leading digit is normalized
away.  Thus we assume

    rec = r' # r0 | r1 | r2 | ..

and if we adapt the above calculations accordingly we arrive at this:

  O # w0  | w1       | w2 | w3 | ..
  O # car | rem + r' | r0 | r1 | ..

Because rec is again a number between -1 and 1, we know that r' cannot
be 2 or -2.  So both r' and rem are in {-1,0,1} hence their sum is
still within the [-2..2] range.

The above translates into the following circuit of state machines:


    b1 b2 b3 ----->----- times a0 ---->|
                                       |---- add ---->|
    a1 a2 a3 ----->----- times b0 ---->|              |
                                                      |--- add --->
                               _______________        |
                              | replace first |       |
  * r' r0 r1 ----->-----------| with car, add |------>|
                              | rem to second |
                               ---------------


Here * indicates an irrelevant input digit, because it will be
replaced with something else anyway (car).  This circuit can be
treated as a black box.  It will be the basic building block of the
multiplication machine.  We draw that black box as a triangle:


                     |\
           y1 -------| \
           x1 -------|  \
                     |   \
                     | a0 \______ out
                     | b0 /
                     |   /
                     |  /
         * rec ------| /
                     |/


This triangle is parameterized by the pair (a0,b0).  It is a state
machine with three T2 inputs and one T2 output.  Its state is a
combination of the internal states of the 5 components inside: two
adders, two scalar multipliers, and one special purpose block that
only acts on the first two elements of the stream.  We will sometimes
draw these triangles simply like this:


        ======|\
              | \
              |  )------
              | /
        ------|/


Now we are ready to set up a scheme for recursion.  To express it as a
state machine, we explicitly unfold the recursive computation:


          1 2 3 4 5 ..
======\=======3=============================|\
       \    2 3 4 5 ..                      | \
        \=====3===================|\        | 0)----
         \    3 4 5 ..            | \       | /
          \===3=========|\        | 1)------|/
                        | \       | /
                        | 2)------|/
                        | /
                * ------|/


On each step, a new triangle is added to the left, parameterized by
the next pair (a,b) of input digits.  The numbers inside the triangles
refer to this parameterization: 0 for (a0,b0) and 1 for (a1,b1) etc.

On each step, all triangles make one state transition.  The inputs are
the same for all triangles.  For instance, the number "3" in the above
picture abbreviates the pair (b3,a3).  The recursive channel receives
input from the triangle before it.  The new (leftmost) triangle is
kicked off with the * dummy that is ignored on the first transition.
